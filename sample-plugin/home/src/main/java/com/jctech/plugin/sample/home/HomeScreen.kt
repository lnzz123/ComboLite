package com.jctech.plugin.sample.home

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.jctech.plugin.sample.common.navigation.AppScreen
import com.jctech.plugin.sample.common.navigation.currentComposeNavigator

/**
 * ‰∏ªÈ°µÂ±èÂπï
 * 
 * Êèê‰æõÊèí‰ª∂ÊµãËØïÂäüËÉΩÁöÑ‰∏ªÁïåÈù¢ÔºåÂåÖÂê´ÂØºËà™„ÄÅÊèí‰ª∂ÁÆ°ÁêÜÁ≠âÂäüËÉΩ
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen() {
    val navigator = currentComposeNavigator
    var showDialog by remember { mutableStateOf(false) }
    var dialogType by remember { mutableStateOf("") }
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { 
                    Text(
                        "Sample Plugin ‰∏ªÈ°µ",
                        fontWeight = FontWeight.Bold
                    ) 
                }
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp)
                .verticalScroll(rememberScrollState()),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Ê¨¢ËøéÂç°Áâá
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer
                )
            ) {
                Column(
                    modifier = Modifier.padding(20.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "üöÄ",
                        fontSize = 48.sp
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "Ê¨¢Ëøé‰ΩøÁî® Sample Plugin",
                        fontSize = 20.sp,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onPrimaryContainer
                    )
                    Text(
                        text = "Êèí‰ª∂ÂäüËÉΩÊµãËØï‰∏≠ÂøÉ",
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.onPrimaryContainer,
                        textAlign = TextAlign.Center
                    )
                }
            }
            
            // È°µÈù¢ÂØºËà™Âå∫Âüü
            Card(
                modifier = Modifier.fillMaxWidth()
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "üì± È°µÈù¢ÂØºËà™ÊµãËØï",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(bottom = 12.dp)
                    )
                    
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        Button(
                            onClick = { navigator.navigate(AppScreen.ScreenOne) },
                            modifier = Modifier.weight(1f)
                        ) {
                            Text("Screen One")
                        }
                        
                        Button(
                            onClick = { navigator.navigate(AppScreen.ScreenTwo) },
                            modifier = Modifier.weight(1f)
                        ) {
                            Text("Screen Two")
                        }
                    }
                }
            }
            
            // Êèí‰ª∂ÁÆ°ÁêÜÂå∫Âüü
            Card(
                modifier = Modifier.fillMaxWidth()
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "üîß Êèí‰ª∂ÁÆ°ÁêÜÂäüËÉΩ",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(bottom = 12.dp)
                    )
                    
                    Column(
                        verticalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        OutlinedButton(
                            onClick = { 
                                dialogType = "update"
                                showDialog = true 
                            },
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            Text("üîÑ Ê£ÄÊü•Êèí‰ª∂Êõ¥Êñ∞")
                        }
                        
                        OutlinedButton(
                            onClick = { 
                                dialogType = "install"
                                showDialog = true 
                            },
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            Text("üì¶ ÂÆâË£ÖÊñ∞Êèí‰ª∂")
                        }
                        
                        OutlinedButton(
                            onClick = { 
                                dialogType = "uninstall"
                                showDialog = true 
                            },
                            modifier = Modifier.fillMaxWidth(),
                            colors = ButtonDefaults.outlinedButtonColors(
                                contentColor = MaterialTheme.colorScheme.error
                            )
                        ) {
                            Text("üóëÔ∏è Âç∏ËΩΩÊèí‰ª∂")
                        }
                    }
                }
            }
            
            // Êèí‰ª∂Èó¥Ë∑≥ËΩ¨ÊµãËØï
            Card(
                modifier = Modifier.fillMaxWidth()
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "üîó Êèí‰ª∂Èó¥Ë∑≥ËΩ¨ÊµãËØï",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(bottom = 12.dp)
                    )
                    
                    Column(
                        verticalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        OutlinedButton(
                            onClick = { 
                                dialogType = "jump_plugin_a"
                                showDialog = true 
                            },
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            Text("‚û°Ô∏è Ë∑≥ËΩ¨Âà∞Êèí‰ª∂ A")
                        }
                        
                        OutlinedButton(
                            onClick = { 
                                dialogType = "jump_plugin_b"
                                showDialog = true 
                            },
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            Text("‚û°Ô∏è Ë∑≥ËΩ¨Âà∞Êèí‰ª∂ B")
                        }
                    }
                }
            }
            
            // Á≥ªÁªü‰ø°ÊÅØ
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surfaceVariant
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "‚ÑπÔ∏è Á≥ªÁªü‰ø°ÊÅØ",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(bottom = 8.dp)
                    )
                    Text(
                        text = "‚Ä¢ Êèí‰ª∂ÁâàÊú¨: 1.0.0\n‚Ä¢ Ê°ÜÊû∂ÁâàÊú¨: 2.0.0\n‚Ä¢ ÊûÑÂª∫Êó∂Èó¥: 2025-01-27",
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
        }
    }
    
    // ÂØπËØùÊ°Ü
    if (showDialog) {
        AlertDialog(
            onDismissRequest = { showDialog = false },
            title = {
                Text(
                    when (dialogType) {
                        "update" -> "Ê£ÄÊü•Êõ¥Êñ∞"
                        "install" -> "ÂÆâË£ÖÊèí‰ª∂"
                        "uninstall" -> "Âç∏ËΩΩÊèí‰ª∂"
                        "jump_plugin_a" -> "Ë∑≥ËΩ¨Êèí‰ª∂ A"
                        "jump_plugin_b" -> "Ë∑≥ËΩ¨Êèí‰ª∂ B"
                        else -> "ÊèêÁ§∫"
                    }
                )
            },
            text = {
                Text(
                    when (dialogType) {
                        "update" -> "Ê≠£Âú®Ê£ÄÊü•Êèí‰ª∂Êõ¥Êñ∞...\n\nÂΩìÂâçÁâàÊú¨: 1.0.0\nÊúÄÊñ∞ÁâàÊú¨: 1.0.0\n\nÊÇ®ÁöÑÊèí‰ª∂Â∑≤ÊòØÊúÄÊñ∞ÁâàÊú¨ÔºÅ"
                        "install" -> "Êèí‰ª∂ÂÆâË£ÖÂäüËÉΩÊºîÁ§∫\n\nËøôÈáåÂ∞ÜÊòæÁ§∫ÂèØÂÆâË£ÖÁöÑÊèí‰ª∂ÂàóË°®ÔºåÁî®Êà∑ÂèØ‰ª•ÈÄâÊã©ÈúÄË¶ÅÁöÑÊèí‰ª∂ËøõË°åÂÆâË£Ö„ÄÇ"
                        "uninstall" -> "Á°ÆÂÆöË¶ÅÂç∏ËΩΩÂΩìÂâçÊèí‰ª∂ÂêóÔºü\n\n‚ö†Ô∏è Âç∏ËΩΩÂêéÂ∞ÜÊó†Ê≥ï‰ΩøÁî®Êèí‰ª∂ÂäüËÉΩÔºåÈúÄË¶ÅÈáçÊñ∞ÂÆâË£Ö„ÄÇ"
                        "jump_plugin_a" -> "Âç≥Â∞ÜË∑≥ËΩ¨Âà∞Êèí‰ª∂ A\n\nËøôÊòØÊèí‰ª∂Èó¥Ë∑≥ËΩ¨ÂäüËÉΩÁöÑÊºîÁ§∫ÔºåÂÆûÈôÖ‰ΩøÁî®Êó∂‰ºöË∑≥ËΩ¨Âà∞ÊåáÂÆöÁöÑÊèí‰ª∂È°µÈù¢„ÄÇ"
                        "jump_plugin_b" -> "Âç≥Â∞ÜË∑≥ËΩ¨Âà∞Êèí‰ª∂ B\n\nËøôÊòØÊèí‰ª∂Èó¥Ë∑≥ËΩ¨ÂäüËÉΩÁöÑÊºîÁ§∫ÔºåÂÆûÈôÖ‰ΩøÁî®Êó∂‰ºöË∑≥ËΩ¨Âà∞ÊåáÂÆöÁöÑÊèí‰ª∂È°µÈù¢„ÄÇ"
                        else -> "Êìç‰ΩúÂÆåÊàê"
                    }
                )
            },
            confirmButton = {
                TextButton(
                    onClick = { showDialog = false }
                ) {
                    Text(
                        if (dialogType == "uninstall") "Á°ÆËÆ§Âç∏ËΩΩ" else "Á°ÆÂÆö",
                        color = if (dialogType == "uninstall") MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary
                    )
                }
            },
            dismissButton = if (dialogType == "uninstall") {
                {
                    TextButton(
                        onClick = { showDialog = false }
                    ) {
                        Text("ÂèñÊ∂à")
                    }
                }
            } else null
        )
    }
}
